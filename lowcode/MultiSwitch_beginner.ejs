/*
 * Simple example for how to use multiple SinricPro Switch device:
 * - setup 4 switch devices
 * - handle request using multiple callbacks
 * 
 * If you encounter any issues:
 * - check the readme.md at https://github.com/sinricpro/esp8266-esp32-sdk/blob/master/README.md
 * - ensure all dependent libraries are installed
 *   - see https://github.com/sinricpro/esp8266-esp32-sdk/blob/master/README.md#arduinoide
 *   - see https://github.com/sinricpro/esp8266-esp32-sdk/blob/master/README.md#dependencies
 * - open serial monitor and check whats happening
 * - check full user documentation at https://sinricpro.github.io/esp8266-esp32-sdk
 * - visit https://github.com/sinricpro/esp8266-esp32-sdk/issues and check for existing issues or open a new one
 */

// Uncomment the following line to enable serial debug output
<%if (enableSDKLogs) { %>
#define ENABLE_DEBUG
<% } %>

#ifdef ENABLE_DEBUG
       #define DEBUG_ESP_PORT Serial
       #define NODEBUG_WEBSOCKETS
       #define NDEBUG
#endif 

#include <Arduino.h>
#ifdef ESP8266 
       #include <ESP8266WiFi.h>
#endif 
#ifdef ESP32   
       #include <WiFi.h>
#endif

#include "SinricPro.h"
#include "SinricProSwitch.h"

#define WIFI_SSID         "<%- wiFiName -%>"
#define WIFI_PASS         "<%- wiFiPassword -%>"
#define APP_KEY           <%- appKey %>
#define APP_SECRET        <%- appSecert %>
<% for (var i=1; i<gpioMappings.length+1; i++) { %>
<% switchid = gpioMappings[i-1].deviceId -%>
#define SWITCH_ID_<%- i-%>       "<%= switchid -%>"
#define RELAYPIN_<%- i-%>  <%= gpioMappings[i-1].relayGPIO%>
<% } %>
#define BAUD_RATE         9600                // Change baudrate to your need
<% for (var i=1; i < gpioMappings.length +1; i++) { %>
bool onPowerState<%= i %>(const String &deviceId, bool &state) {
    Serial.printf("Device <%= i %> turned %s", state?"on":"off");
    digitalWrite(RELAYPIN_<%- i-%>, state ? HIGH:LOW);
    return true; // request handled properly
}
<% } %>

// setup function for WiFi connection
void setupWiFi() {
  Serial.printf("\r\n[Wifi]: Connecting");
  WiFi.begin(WIFI_SSID, WIFI_PASS);

  while (WiFi.status() != WL_CONNECTED) {
    Serial.printf(".");
    delay(250);
  }

  Serial.printf("connected!\r\n[WiFi]: IP-Address is %s\r\n", WiFi.localIP().toString().c_str());
}

// setup function for SinricPro
void setupSinricPro() {
  // add devices and callbacks to SinricPro
  <% for (var i=1; i<gpioMappings.length+1; i++) { -%>
pinMode(RELAYPIN_<%- i -%>, OUTPUT);
  <% } -%>
  <% for (var i=1; i<gpioMappings.length+1; i++) { %>
  SinricProSwitch& mySwitch<%= i %> = SinricPro[SWITCH_ID_<%= i %>];
  mySwitch1.onPowerState(onPowerState<%= i %>);
  <% } %>
  
  // setup SinricPro
  SinricPro.onConnected([](){ Serial.printf("Connected to SinricPro\r\n"); }); 
  SinricPro.onDisconnected([](){ Serial.printf("Disconnected from SinricPro\r\n"); });
  <%if (restoreState) { %>
  SinricPro.restoreDeviceStates(true);
  <% } %>
  SinricPro.begin(APP_KEY, APP_SECRET);
}

// main setup function
void setup() {
  Serial.begin(BAUD_RATE); Serial.printf("\r\n\r\n");
  setupWiFi();
  setupSinricPro();
}

void loop() {
  SinricPro.handle();
}
