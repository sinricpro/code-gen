#include <Arduino.h>
#include <ArduinoOTA.h>
#include <SoftwareSerial.h>
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h> // Get it from https://github.com/adafruit/Adafruit_BME280_Library

<%if (enableSDKLogs) { -%>
#define ENABLE_DEBUG
<% } %>

#ifdef ENABLE_DEBUG
       #define DEBUG_ESP_PORT Serial
       #define NODEBUG_WEBSOCKETS
       #define NDEBUG
#endif 

#include <Arduino.h>
#ifdef ESP8266 
       #include <ESP8266WiFi.h>
#endif 
#ifdef ESP32   
       #include <WiFi.h>
#endif

#include "SinricPro.h"
#include "SinricProSwitch.h"
#include "SinricProTemperaturesensor.h"


#define SEALEVELPRESSURE_HPA (1013.25)
#define EVENT_WAIT_TIME   	60000               // send event every 60 seconds
#define BAUD_RATE   		115200

#define WIFI_SSID         "<%- wiFiName -%>"
#define WIFI_PASS         "<%- wiFiPassword -%>"
#define APP_KEY           "<%- appKey %>"
#define APP_SECRET        "<%- appSecert %>"
#define TEMP_SENSOR_ID    "<%- gpioMappings[0].deviceId %>"  

Adafruit_BME280 bme; // I2C

bool myPowerState = false;
unsigned long lastBtnPress = 0;
unsigned long startTime = millis();

bool deviceIsOn;                              // Temeprature sensor on/off state
float temperature;                            // actual temperature
float humidity;                               // actual humidity
float lastTemperature;                        // last known temperature (for compare)
float lastHumidity;                           // last known humidity (for compare)
unsigned long lastEvent = (-EVENT_WAIT_TIME); // last time event has been sent

void setupWiFi() {
  Serial.printf("\r\n[Wifi]: Connecting");

  #if defined(ESP8266)
    WiFi.setSleepMode(WIFI_NONE_SLEEP); 
    WiFi.setAutoReconnect(true);
  #elif defined(ESP32)
    WiFi.setSleep(false); 
    WiFi.setAutoReconnect(true);
  #endif

  WiFi.begin(WIFI_SSID, WIFI_PASS);

  while (WiFi.status() != WL_CONNECTED) {
    Serial.printf(".");
    delay(250);
  }
  
  IPAddress localIP = WiFi.localIP();
  Serial.printf("connected!\r\n[WiFi]: IP-Address is %d.%d.%d.%d\r\n", localIP[0], localIP[1], localIP[2], localIP[3]);
}

/* bool onPowerState(String deviceId, bool &state) 
 *
 * Callback for setPowerState request
 * parameters
 *  String deviceId (r)
 *    contains deviceId (useful if this callback used by multiple devices)
 *  bool &state (r/w)
 *    contains the requested state (true:on / false:off)
 *    must return the new state
 * 
 * return
 *  true if request should be marked as handled correctly / false if not
 */
bool onPowerState(const String &deviceId, bool &state) {
  Serial.printf("Temperaturesensor turned %s (via SinricPro) \r\n", state?"on":"off");
  deviceIsOn = state; // turn on / off temperature sensor
  return true; // request handled properly
}
 
// setup function for SinricPro
void setupSinricPro() {
  // add device to SinricPro  
  SinricProTemperaturesensor &mySensor = SinricPro[TEMP_SENSOR_ID];
  mySensor.onPowerState(onPowerState);
  
  SinricPro.onConnected([](){ Serial.printf("Connected to SinricPro\r\n"); }); 
  SinricPro.onDisconnected([](){ Serial.printf("Disconnected from SinricPro\r\n"); });
  
  // setup SinricPro
  SinricPro.begin(APP_KEY, APP_SECRET);
}

void setupTemperatureSensor() {
  //if (!bme.begin(BME280_ADDRESS_ALTERNATE)) { // For alternative I2C
  if (!bme.begin()) { 
    Serial.println("Could not find a valid BME280 sensor!");
    while (1)
      ;
  }
} 

void handleTemperaturesensor() {
  if (deviceIsOn == false) return; // device is off...do nothing
  
  unsigned long actualMillis = millis();
  if (actualMillis - lastEvent < EVENT_WAIT_TIME) return; //only check every EVENT_WAIT_TIME milliseconds

  Serial.println("Temperature: " + String(bme.readTemperature(), 2) + " *C");
  Serial.println("Pressure: " + String(bme.readPressure() / 100.0F, 2) + " hPa");
  Serial.println("Altitude: " + String(bme.readAltitude(SEALEVELPRESSURE_HPA), 2) + " m");
  Serial.println("Humidity: " + String(bme.readHumidity(), 2) + " %");
  Serial.println("");
  
  temperature = bme.readTemperature();          // get actual temperature
  humidity = bme.readHumidity();                // get actual humidity

  if (isnan(temperature) || isnan(humidity)) { // reading failed... 
    Serial.printf("BME reading failed!\r\n");   
    return; 
  } 

  if (temperature == lastTemperature || humidity == lastHumidity) return; // if no values changed do nothing...

  SinricProTemperaturesensor &mySensor = SinricPro[TEMP_SENSOR_ID];  // get temperaturesensor device
  bool success = mySensor.sendTemperatureEvent(temperature, humidity); // send event

  if (success) {  // if event was sent successfuly, print temperature and humidity to serial
    Serial.printf("Temperature: %2.1f Celsius\tHumidity: %2.1f%%\r\n", temperature, humidity);
  } else {  // if sending event failed, print error message
    Serial.printf("Something went wrong...could not send Event to server!\r\n"); 
  }

  lastTemperature = temperature;  // save actual temperature for next compare
  lastHumidity = humidity;        // save actual humidity for next compare
  lastEvent = actualMillis;       // save actual time for next compare
}
 
void setup() {
  Wire.begin();   
  Serial.begin(BAUD_RATE);
  
  setupTemperatureSensor();
  setupWiFi();
  setupSinricPro(); 
}
 
void loop() {
  // put your main code here, to run repeatedly:
  handleTemperaturesensor();
  SinricPro.handle(); 
}
