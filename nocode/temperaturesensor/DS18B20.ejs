/*
 * Example for how to use SinricPro Temperature Sensor device:
 * - setup a temperature sensor device
 * - send temperature event to SinricPro server when temperature has changed
 * 
 *
 * DS18B20 Library used in this example: https://github.com/milesburton/Arduino-Temperature-Control-Library
 * Based on example: https://github.com/milesburton/Arduino-Temperature-Control-Library/blob/master/examples/Simple/Simple.ino
 * 
 * If you encounter any issues:
 * - check the readme.md at https://github.com/sinricpro/esp8266-esp32-sdk/blob/master/README.md
 * - ensure all dependent libraries are installed
 *   - see https://github.com/sinricpro/esp8266-esp32-sdk/blob/master/README.md#arduinoide
 *   - see https://github.com/sinricpro/esp8266-esp32-sdk/blob/master/README.md#dependencies
 * - open serial monitor and check whats happening
 * - check full user documentation at https://sinricpro.github.io/esp8266-esp32-sdk
 * - visit https://github.com/sinricpro/esp8266-esp32-sdk/issues and check for existing issues or open a new one
 */

<%if (enableSDKLogs) { -%>
#define ENABLE_DEBUG
<% } %>

#ifdef ENABLE_DEBUG
   #define DEBUG_ESP_PORT Serial
   #define NODEBUG_WEBSOCKETS
   #define NDEBUG
#endif 
 
#include <Arduino.h>
#ifdef ESP8266 
   #include <ESP8266WiFi.h>
#endif 
#ifdef ESP32   
   #include <WiFi.h>
#endif

#include "SinricPro.h"
#include "SinricProTemperaturesensor.h"
#include <DallasTemperature.h> // Get it from https://github.com/milesburton/Arduino-Temperature-Control-Library
#include <OneWire.h>  // Get it from https://github.com/PaulStoffregen/OneWire
#include <Wire.h>  

#define WIFI_SSID         "<%- wiFiName -%>"
#define WIFI_PASS         "<%- wiFiPassword -%>"
#define APP_KEY           "<%- appKey %>"
#define APP_SECRET        "<%- appSecert %>"
#define TEMP_SENSOR_ID    "<%- gpioMappings[0].deviceId %>" 
#define BAUD_RATE         115200              // Change baudrate to your need (used for serial monitor)
#define EVENT_WAIT_TIME   60000   

#define ONE_WIRE_BUS     <%- gpioMappings[0].GPIO %>              

// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);

bool deviceIsOn;                              // Temeprature sensor on/off state
float temperature;                            // actual temperature
float lastTemperature;                        // last known temperature (for compare)
unsigned long lastEvent = (-EVENT_WAIT_TIME); // last time event has been sent

/* bool onPowerState(String deviceId, bool &state) 
 *
 * Callback for setPowerState request
 * parameters
 *  String deviceId (r)
 *    contains deviceId (useful if this callback used by multiple devices)
 *  bool &state (r/w)
 *    contains the requested state (true:on / false:off)
 *    must return the new state
 * 
 * return
 *  true if request should be marked as handled correctly / false if not
 */
bool onPowerState(const String &deviceId, bool &state) {
  Serial.printf("Temperaturesensor turned %s (via SinricPro) \r\n", state?"on":"off");
  deviceIsOn = state; // turn on / off temperature sensor
  return true; // request handled properly
}

/* handleTemperatatureSensor()
 * - Checks if Temperaturesensor is turned on
 * - Checks if time since last event > EVENT_WAIT_TIME to prevent sending too much events
 * - Get actual temperature and check if these values are valid
 * - Compares actual temperature to last known temperature
 * - Send event to SinricPro Server if temperature changed
 */
void handleTemperaturesensor() {
  if (deviceIsOn == false) {
    Serial.print("Sensor is truned off. Do nothing!");
    return;
  }; 

  unsigned long actualMillis = millis();
  if (actualMillis - lastEvent < EVENT_WAIT_TIME) return; //only check every EVENT_WAIT_TIME milliseconds
  
  Serial.print("Requesting DS18B20 temperatures...");
  sensors.requestTemperatures(); // Send the command to get temperatures

  uint8_t count = sensors.getDS18Count();

  if(count <= 0) {
    Serial.printf("DS18B20 sensor not found!\r\n");  // print error message
    return;
  } 

  float temperature = sensors.getTempCByIndex(0);
  
  if (temperature == DEVICE_DISCONNECTED_C) { // reading failed... 
    Serial.printf("Reading DS18B20 failed!\r\n");  // print error message
    return; // try again next time
  } 

  if (temperature == lastTemperature) {
    Serial.printf("Temperature has not changed since last read. do nothing...!\r\n");
    return; // try again next time
  }

  SinricProTemperaturesensor &mySensor = SinricPro[TEMP_SENSOR_ID];  // get temperaturesensor device
  bool success = mySensor.sendTemperatureEvent(temperature); // send event

  if (success) {  // if event was sent successfuly, print temperature to serial
    Serial.printf("Temperature: %2.1f Celsius\r\n", temperature);
  } else {  // if sending event failed, print error message
    Serial.printf("Something went wrong...could not send Event to server!\r\n");
  }

  lastTemperature = temperature;  // save actual temperature for next compare
  lastEvent = actualMillis;       // save actual time for next compare
}


// setup function for WiFi connection
void setupWiFi() {
  Serial.printf("\r\n[Wifi]: Connecting");
  WiFi.begin(WIFI_SSID, WIFI_PASS);

  while (WiFi.status() != WL_CONNECTED) {
    Serial.printf(".");
    delay(250);
  }
  IPAddress localIP = WiFi.localIP();
  Serial.printf("connected!\r\n[WiFi]: IP-Address is %d.%d.%d.%d\r\n", localIP[0], localIP[1], localIP[2], localIP[3]);
}

// setup function for SinricPro
void setupSinricPro() {
  // add device to SinricPro
  SinricProTemperaturesensor &mySensor = SinricPro[TEMP_SENSOR_ID];
  mySensor.onPowerState(onPowerState);

  // setup SinricPro
  SinricPro.onConnected([](){ Serial.printf("Connected to SinricPro\r\n"); }); 
  SinricPro.onDisconnected([](){ Serial.printf("Disconnected from SinricPro\r\n"); });
  <% if (restoreState) { -%>
SinricPro.restoreDeviceStates(true); // Uncomment to restore the last known state from the server.
  <% } %> 
  SinricPro.begin(APP_KEY, APP_SECRET);
}

void setupSensor() {
  // Start up the library
  sensors.begin();
}

// main setup function
void setup() {
  Serial.begin(BAUD_RATE); Serial.printf("\r\n\r\n");
  
  setupSensor();
  setupWiFi();
  setupSinricPro();
}

void loop() {
  SinricPro.handle();
  handleTemperaturesensor();
}